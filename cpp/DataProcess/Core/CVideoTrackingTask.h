/*
 * Copyright (C) 2021 Ikomia SAS
 * Contact: https://www.ikomia.com
 *
 * This file is part of the Ikomia API libraries.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef CVIDEOTRACKINGTASK_H
#define CVIDEOTRACKINGTASK_H

#include "CVideoTask.h"
#include "DataProcessGlobal.hpp"

/**
 * @ingroup groupDataProcess
 * @brief The CVideoTrackingTask class is derived from CVideoTask and is dedicated to tracking task.
 * @details This class handles the graphics input to extract the region of interest to track. This region is limited to rectangle region.
 * It also generates the tracking results as a binary mask and a dedicated graphics layer.
 */
class DATAPROCESSSHARED_EXPORT CVideoTrackingTask : public CVideoTask
{
    public:

        /**
         * @brief Default constructor.
         *  - Inputs: same as C2dImageTask.
         *  - Outputs: binary mask, original image, graphics layer and measures.
         */
        CVideoTrackingTask();
        /**
         * @brief Constructs CVideoTrackingTask with the given name.
         *  - Inputs: same as C2dImageTask.
         *  - Outputs: binary mask, original image, graphics layer and measures.
         */
        CVideoTrackingTask(const std::string& name);

        virtual ~CVideoTrackingTask() = default;

        /**
         * @brief Notifies the video has started. Update internal states.
         * @param frameCount: total number of frames.
         */
        void    notifyVideoStart(int frameCount) override;
        /**
         * @brief Notifies the end of the video is reached. Update internal states.
         */
        void    notifyVideoEnd() override;

        /**
         * @brief Extracts region of interest to track from graphics input.
         */
        void    setRoiToTrack();

        /**
         * @brief Fills all the outputs generated by tracking algorithm.
         *  - 0: binary mask of the tracked region.
         *  - 1: original image with tracked graphics item.
         *  - 2: graphics output (tracked item).
         *  - 3: tracked region coordinates.
         */
        void    manageOutputs();

    /** @cond INTERNAL */
    protected:

        cv::Rect2d                  m_trackedRect;
        bool                        m_bInitRoi = false;
        bool                        m_bVideoStarted = false;
    /** @endcond */
};

#endif // CVIDEOTRACKINGTASK_H
