/**
 * @defgroup groupUtils Utils 
 * @brief The module Utils groups tool classes
 */

/**
 * @defgroup groupCore Core 
 * @brief The module Core groups all core features of the Ikomia API. It includes classes for protocol management.
 * @details The extension capability is based on inheritance and this Core module offers the main base classes.
 * The system uses the concept of protocol to process images. A protocol is a graph composed of processing tasks, 
 * each task comes with its parameters, its inputs and its outputs. Additionnally, a widget (ie window) is associated with the task to ensure user interaction.
 * Through this API We provide base class that you could override for each component:
 *  - CProtocolTask: base class for processing tasks
 *  - CProtocolTaskParam: base class for associated parameters
 *  - CProtocolTaskIO: base class for input or outputs
 *  - CProtocolTaskWidget: base class for associated widget
 *  .
 * We also provide some more advanced classes to simplify implementation of popular components:
 *  - CImageProcessIO: class for image input or output (can be overriden)
 *  - CVideoProcessIO: class for video input or output (can be overriden)
 *  - CWidgetOutput: class for custom widget output (should be overriden)
 *  .
 */

 /**
 * @defgroup groupDataProcess Data Processing 
 * @brief The module Data Processing groups all features dedicated to processing extensions.
 * @details The system uses factory design pattern to allow integration of third-party plugins. 
 * So when you want to add your own plugin, you have to implement three factory classes derived from the followings:
 *  - CPluginProcessInterface: abstract base class exposing the two required factories (process task and widget)
 *  - CProcessFactory: abstract base class for process instanciation
 *  - CWidgetFactory: abstract base class for widget instanciation
 *  .
 * This module also provides class specialization for common processing task:
 *  - CImageProcess2d: dedicated to image processing
 *  - CInteractiveImageProcess2d: dedicated to image processing requiring user interaction
 *  - CVideoProcess: dedicated to video processing
 *  - CVideoProcessOF: dedicated to optical flow processing
 *  - CVideoProcessTracking: dedicated to tracking processing
 */ 